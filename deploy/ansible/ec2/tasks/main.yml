---
# tasks file for setup-ec2
- name: Installing boto library
  ansible.builtin.pip:
    name: boto
    state: present

### VPC Security Group ###
- name: Creating Security Group for VPC Instruct Bot
  amazon.aws.ec2_security_group:
    name: "{{ ec2_secgroup_name }}"
    aws_region: "{{ ec2_aws_region }}"
    description: "{{ ec2_security_group_description }}"
    vpc_id: "{{ ec2_vpc_id }}"
    rules:
      - proto: all
        cidr_ip: "0.0.0.0/0"

#### Node Deployment ###
- name: Deploying EC2 Node
  amazon.aws.ec2_instance:
    name: "{{ ec2_aws_nodetype_tag }}-{{ item + 1 }}"
    aws_region: "{{ ec2_aws_region }}"
    key_name: "{{ ec2_aws_key_name }}"
    instance_type: "{{ ec2_aws_instance_type }}"
    image_id: "{{ ec2_aws_image_id }}"
    security_group: "{{ ec2_secgroup_name }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 250
          delete_on_termination: true
          volume_type: standard
    network:
      assign_public_ip: true
    subnet_id: "{{ ec2_aws_subnet }}"
    tags:
      NodeType: "{{ ec2_aws_nodetype_tag }}"
    state: running
    wait: true
  register: node_ip
  loop: "{{ range(0, ec2_node_count | int) }}"
  async: 7200
  poll: 0

- name: Wait for all instances to finish initializing
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  loop: "{{ node_ip['results'] }}"
  until: ec2_jobs.finished
  retries: 300

- name: Combine ec2_jobs and index
  ansible.builtin.set_fact:
    ec2_jobs_with_index: "{{ ec2_jobs.results | zip(range(0, ec2_node_count | int)) | list }}"

- name: Updating the node's public ip in inventory
  ansible.builtin.lineinfile:
    path: "{{ inventory_location }}"
    regexp: "labNodes"
    line: "[labNodes]\n{{ item.0['instances'][0]['public_ip_address'] }} ansible_ssh_user=fedora ansible_ssh_private_key_file={{ aws_key_path }}"
  loop: "{{ ec2_jobs_with_index }}"
  when: ec2_aws_instance_type == "g4dn.xlarge"

- name: Updating the node's public ip in inventory
  ansible.builtin.lineinfile:
    path: "{{ inventory_location }}"
    regexp: "botNode"
    line: "[botNode]\n{{ item.0['instances'][0]['public_ip_address'] }} ansible_ssh_user=fedora ansible_ssh_private_key_file={{ aws_key_path }}"
  loop: "{{ ec2_jobs_with_index }}"
  when: ec2_aws_instance_type != "g4dn.xlarge"

- name: Parse the first host from the inventory
  ansible.builtin.set_fact:
    first_instance_ip: "{{ ec2_jobs_with_index[0][0]['instances'][0]['public_ip_address'] }}"

- name: Wait until the host is reachable via SSH
  ansible.builtin.wait_for:
    host: "{{ first_instance_ip }}"
    port: 22
    delay: 10
    timeout: 180
    state: started
  delegate_to: localhost
