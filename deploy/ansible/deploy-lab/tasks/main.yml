---
- name: Update all packages
  ansible.builtin.dnf:
    name: "*"
    state: latest
  become: yes

- name: Install base required packages
  ansible.builtin.dnf:
    name:
      - g++
      - python3
      - python3-devel
      - nodejs
      - dnf-plugins-core
    state: present
  become: yes

- name: Add container runtime repo
  ansible.builtin.command: dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
  become: yes

- name: Install container runtime
  ansible.builtin.dnf:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
  become: yes

- name: Install pm2 using npm
  ansible.builtin.npm:
    name: pm2
    global: yes
  become: yes

- name: Check if the instruct-lab-bot directory exists
  stat:
    path: {{ ghbot_directory }}/instruct-lab-bot
  register: instruct_lab_bot_dir

- name: Delete the instruct-lab-bot directory if it exists
  file:
    path: {{ ghbot_directory }}/instruct-lab-bot
    state: absent
  when: instruct_lab_bot_dir.stat.exists

- name: Clone the instruct-lab-bot repository
  git:
    repo: https://github.com/redhat-et/instruct-lab-bot
    dest: {{ ghbot_directory }}/instruct-lab-bot
    clone: yes
    update: yes

- name: Install instruct lab bot dependencies
  ansible.builtin.shell: |
    cd {{ ghbot_directory }}
    npm install
  args:
    executable: /bin/bash

- name: Setup environment variables for instruct lab bot
  ansible.builtin.shell: |
    cd {{ ghbot_directory }}
    echo "export GITHUB_TOKEN={{ github_token }}" > .env
  args:
    executable: /bin/bash

- name: Setup environment variables for instruct lab bot
  vars:
    env_file_path: {{ ghbot_directory }}/.env
  tasks:
    - name: Ensure key-value pairs are in .env file
      ansible.builtin.lineinfile:
        path: "{{ env_file_path }}"
        line: "{{ item.key }}={{ item.value }}"
        insertafter: EOF
      loop:
        - { key: "WEBHOOK_PROXY_URL", value: ${{ secrets.WEBHOOK_PROXY_URL }} }
        - { key: "APP_ID", value: ${{ secrets.APP_ID }} }
        - { key: "PRIVATE_KEY", value: ${{ secrets.PRIVATE_KEY }} }
        - { key: "WEBHOOK_SECRET", value: ${{ secrets.WEBHOOK_SECRET }} }
        - { key: "GITHUB_CLIENT_ID", value: ${{ secrets.GITHUB_CLIENT_ID }} }
        - { key: "GITHUB_CLIENT_SECRET", value: ${{ secrets.GITHUB_CLIENT_SECRET }} }

- name: Run the instruct lab bot
  ansible.builtin.shell: |
    cd {{ ghbot_directory }}
    pm2 start npm --name "ghbot" -- start
  args:
    executable: /bin/bash

- name: Check if the cli directory exists
  stat:
    path: /home/{{ ansible_user }}/cli
  register: cli_dir

- name: Delete the cli directory if it exists
  file:
    path: /home/{{ ansible_user }}/cli
    state: absent
  when: cli_dir.stat.exists

- name: Clone the cli repository
  git:
    repo: https://github.com/instruct-lab/cli
    dest: /home/{{ ansible_user }}/cli
    clone: yes
    update: yes

#- name: Clone the CLI repo
#  ansible.builtin.shell: |
#    git clone git@github.com:instruct-lab/cli.git

- name: Create Python virtual environment if it does not exist
  ansible.builtin.shell: |
    python3 -m venv {{ python_venv_path }}
  args:
    executable: /bin/bash
    creates: "{{ python_venv_path }}/bin/activate"

- name: Install Labrador CLI
  ansible.builtin.shell: |
    source {{ python_venv_path }}/bin/activate
    cd {{ app_directory }}
    pip install -e .
  args:
    executable: /bin/bash

- name: Install additional packages
  ansible.builtin.shell: |
    source {{ python_venv_path }}/bin/activate
    pip3 install huggingface-hub
  args:
    executable: /bin/bash

- name: Download model from Hugging Face
  ansible.builtin.shell: |
    source {{ python_venv_path }}/bin/activate
    mkdir -p {{ models_directory }}
    huggingface-cli download TheBloke/Mistral-7B-Instruct-v0.1-GGUF mistral-7b-instruct-v0.1.Q4_K_M.gguf --local-dir {{ models_directory }} --local-dir-use-symlinks False
  args:
    executable: /bin/bash

- name: Initialize lab
  ansible.builtin.shell: |
    source {{ python_venv_path }}/bin/activate
    cd {{ app_directory }}
    lab init --non-interactive
  args:
    executable: /bin/bash

- name: Update the model path in config.yaml
  ansible.builtin.replace:
    path: "{{ app_directory }}/config.yaml"
    regexp: "model_path: models/merlinite-7b-Q4_K_M.gguf"
    replace: "model_path: {{ new_model_path }}"

- name: Serve the lab
  ansible.builtin.shell: |
    source {{ python_venv_path }}/bin/activate
    cd {{ app_directory }}
    lab serve --model-path ./{{ new_model_path }}
  args:
    executable: /bin/bash
    async: 10
    poll: 0
